#pragma once

#include <random>
#include <glm/glm.hpp>
#include "fenix/utils/std_types.hh"

namespace fenix {

    /// A static class that defines a series of useful functions for generating random numbers.
    class Random
    {
    public:
        /// Initializes the RNG engine.
        /// Seeds the Mersenne Twister engine with a value generated by `std::random_device`.
        /// If you need reproducible results there is an overload of this function that accepts a
        /// seed value as a parameter.
        static void Init() { s_Engine.seed(std::random_device{}()); }

        /// Initializes the RNG engine with a specific seed, ensuring reproducible results.
        static void Init(u32 seed) { s_Engine.seed(seed); }

        /// Generates a random integer in the range [min, max] with min, max >= 0.
        static u32 GenerateUInt(u32 min, u32 max)
        {
            // NOTE(Miguel): Benchmark this against using the modulus operator, current approach
            // might be sacrificing speed for quality.
            auto distrib = std::uniform_int_distribution<u32>{min, max};
            return distrib(s_Engine);
        }

        /// Generates a random float in the range [0, 1).
        static f32 GenerateFloat()
        {
            auto distrib = std::uniform_real_distribution<f32>{};
            return distrib(s_Engine);
        }

        /// Returns a random Vec3 with all its components in the range [min, max).
        static glm::vec3 GenerateVec3(f32 min = 0, f32 max = 1)
        {
            auto distrib = std::uniform_real_distribution<f32>{};
            return glm::vec3{// clang-format off
                distrib(s_Engine) * (max - min) + min,
                distrib(s_Engine) * (max - min) + min,
                distrib(s_Engine) * (max - min) + min
            }; // clang-format on
        }

        /// Returns a random direction vector in 3D space.
        static glm::vec3 GenerateDir() { return glm::normalize(GenerateVec3(-1, 1)); }

    private:
        static std::mt19937 s_Engine;
    };

} // namespace fenix
